!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("three")):"function"==typeof define&&define.amd?define(["exports","three"],r):r((e=e||self).threeBufferVertexData={},e.three)}(this,function(e,r){var t=function(e){switch(e){case"int8":return Int8Array;case"int16":return Int16Array;case"int32":return Int32Array;case"uint8":return Uint8Array;case"uint16":return Uint16Array;case"uint32":return Uint32Array;case"float32":return Float32Array;case"float64":return Float64Array;case"array":return Array;case"uint8_clamped":return Uint8ClampedArray}},n=function(e,r,n){if(!e)throw new TypeError("must specify data as first parameter");if(n=0|+(n||0),Array.isArray(e)&&e[0]&&"number"==typeof e[0][0]){var a,i,f,o,u=e[0].length,s=e.length*u;r&&"string"!=typeof r||(r=new(t(r||"float32"))(s+n));var y=r.length-n;if(s!==y)throw new Error("source length "+s+" ("+u+"x"+e.length+") does not match destination length "+y);for(a=0,f=n;a<e.length;a++)for(i=0;i<u;i++)r[f++]=null===e[a][i]?NaN:e[a][i]}else if(r&&"string"!=typeof r)r.set(e,n);else{var l=t(r||"float32");if(Array.isArray(e)||"array"===r)for(a=0,f=n,o=(r=new l(e.length+n)).length;f<o;f++,a++)r[f]=null===e[a]?NaN:e[a];else 0===n?r=new l(e):(r=new l(e.length+n)).set(e,n)}return r};function a(e,t,a){e=n(e=e||[],a);var i=new r.BufferAttribute(e,t);return i.itemSize=t,i.needsUpdate=!0,i}e.attr=function(e,r,t,n,i){if("number"!=typeof n&&(n=3),"string"!=typeof i&&(i="float32"),Array.isArray(t)&&Array.isArray(t[0])&&t[0].length!==n)throw new Error("Nested vertex array has unexpected size; expected "+n+" but found "+t[0].length);var f=a(t,n,i);e.setAttribute(r,f)},e.index=function(e,r,t,n){"number"!=typeof t&&(t=1),"string"!=typeof n&&(n="uint16");var i=a(r,t,n);i&&(e.index||"function"==typeof e.setIndex?e.index=i:e.addAttribute("index",i))}});
//# sourceMappingURL=three-buffer-vertex-data.umd.js.map
